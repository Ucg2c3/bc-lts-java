import static ExtraFunctions.*

plugins {
    id "biz.aQute.bnd.builder" version "7.0.0"
}

jar.archiveBaseName = "bcprov-lts$vm_range"

sourceSets {
    main {
        java {
            srcDirs '../core/src/main/java'
        }
        resources {
            srcDirs '../core/src/main/resources'
        }
    }
    java9 {
        java {
            srcDirs = ['src/main/jdk1.9','../core/src/main/java9' ]
        }
    }
    java11 {
        java {
            srcDirs = ['src/main/jdk1.11']
        }
    }
    java15 {
        java {
            srcDirs = ['src/main/jdk1.15']
        }
    }
    java21 {
        java {
            srcDirs = ['src/main/jdk21']
        }
    }
}

dependencies {
    implementation project(path: ':core')
    java9Implementation files([sourceSets.main.output.classesDirs]) {
        builtBy compileJava
    }

    java11Implementation files([sourceSets.main.output.classesDirs, sourceSets.java9.output.classesDirs]) {
        builtBy compileJava9Java
    }

    java15Implementation files([sourceSets.main.output.classesDirs, sourceSets.java9.output.classesDirs, sourceSets.java11.output.classesDirs]) {
        builtBy compileJava11Java
    }

    java21Implementation files([sourceSets.main.output.classesDirs, sourceSets.java9.output.classesDirs, sourceSets.java11.output.classesDirs, sourceSets.java15.output.classesDirs]) {
        builtBy compileJava15Java
    }
}

compileJava {
    options.release = 8
}

compileJava9Java {
    options.release = 9
    options.sourcepath = files(['../core/src/main/java', 'src/main/java', 'src/main/jdk1.9','../core/src/main/java9'])
}

compileJava11Java {
    options.release = 11
}

compileJava15Java {
    options.release = 15
}

compileJava21Java {
    options.release = 21
}

compileTestJava {
    options.release = 8
}


jar {
    from sourceSets.main.output
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    into('META-INF/versions/11') {
        from sourceSets.java11.output
    }
    into('META-INF/versions/15') {
        from sourceSets.java15.output
    }
    into('META-INF/versions/21') {
        from sourceSets.java21.output
    }

    String v = "${rootProject.extensions.ext.bundle_version}"
    manifest.attributes('Multi-Release': 'true')
    manifest.attributes('Bundle-Name': 'bcprov')
    manifest.attributes('Bundle-SymbolicName': 'bcprov')
    manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8')
    manifest.attributes('Export-Package': "!org.bouncycastle.internal.*,org.bouncycastle.*;version=${v}")
    manifest.attributes('Import-Package': 'java.*;resolution:=optional,javax.*;resolution:=optional')
    manifest.attributes('Bundle-Version': "${v}")
    manifest.attributes('Permissions': 'all-permissions')
    manifest.attributes('Codebase': '*')
    manifest.attributes('Application-Library-Allowable-Codebase': '*')
    manifest.attributes('Caller-Allowable-Codebase': '*')
    manifest.attributes('Trusted-Library': 'true')
}

task sourcesJar(type: Jar) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    exclude("**/*.so")
    into('META-INF/versions/9') {
        from sourceSets.java9.allSource
    }
    into('META-INF/versions/11') {
        from sourceSets.java11.allSource
    }
    into('META-INF/versions/15') {
        from sourceSets.java15.allSource
    }
    into('native/intel') {
        from '../native_c/intel'
    }
    into('native/jniutil') {
        from '../native_c/jniutil'
    }
}

task fullJavaDoc(type: Javadoc) {
    title = "Bouncy Castle Library (LTS Edition) ${version} Provider API"
    options.windowTitle = "Bouncy Castle Library (LTS Edition) ${version} Provider API"
    options.overview = "overview.html"
    source = files([sourceSets.main.allJava])
}

task javadocJar(type: Jar, dependsOn: fullJavaDoc) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

task('copyJars', type: Copy) {
    from new File(projectDir, "build/libs")
    into new File(rootDir, "../bc-lts-java-jars/${version}/")
}


tasks.register('testNoPSprov', Test) {
    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true

    jvmArgs '-Dorg.bouncycastle.test.skip_pc=true',
            '-Dorg.bouncycastle.packet_cipher_enabled=false',
            '-Dorg.bouncycastle.bks.enable_v1=true',
            '-Dtest.bclts.ignore.native=sha,gcm,cbc,ecb,es,cfb,ctr,ccm',
            '-Dorg.bouncycastle.native.cpu_variant=java'

    filter {
        includeTestsMatching "AllTest*"
    }
}


test {
    testLogging.showStandardStreams = true
    testLogging.showCauses = true
    testLogging.showExceptions = true
    testLogging.showStackTraces = true

    jvmArgs '-Dorg.bouncycastle.bks.enable_v1=true',
            '-Dtest.bclts.ignore.native=sha,gcm,cbc,ecb,es,cfb,ctr,ccm',
            '-Dorg.bouncycastle.native.cpu_variant=java'

}

test.dependsOn("testNoPSprov")
