buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

}

plugins {
    id "io.spring.nohttp" version "0.0.11"
    id "checkstyle"
    id "jacoco"
    id "java"
}

//println("Environment setup:")
//["LTS_JDK8", "LTS_JDK11", "LTS_JDK15","LTS_JDK21"].each({ it ->
//    println("Looking for JDK ENV '${it}' found  ${System.getenv(it)}");
//    if (System.getenv(it) == null) {
//        println("Looking for JDK ENV '${it}' but found null, see README 'Environmental variables'");
//    }
//})


if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

def String deriveOSGIVersion(String prjVersion) {
    if (prjVersion.contains("-SNAPSHOT")) {
        // Snapshots always extend to fourth level and terminate with time in seconds since epoch.
        prjVersion = prjVersion.replace("-SNAPSHOT", "");
        while (prjVersion.count(".") < 2) {
            prjVersion = prjVersion + ".0";
        }
        prjVersion = prjVersion + "." + System.currentTimeMillis().intdiv(1000L).intdiv(60).intdiv(60).intdiv(24);
    }
    return prjVersion
}


String resolveProp(String name, String alt) {
    return (System.getenv(name) ?: findProperty(name) ?: alt).toString();
}

ext {
    debugBuild = Boolean.parseBoolean(resolveProp("debug_build", "false"));
    debugSuffix = Boolean.parseBoolean(resolveProp("debug_build", "false")) ? "-debug" : ""

    bundle_version = deriveOSGIVersion(version.toString())
}




// this needs to go here, otherwise it can't find config
apply plugin: 'io.spring.nohttp'


allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'junit:junit:4.13.2'
    }

    test {
        forkEvery = 1
        maxParallelForks = 1
    }

    compileJava {
        options.debug = rootProject.ext.debugBuild
    }

}

ext {
    bundle_version = deriveOSGIVersion(version.toString());
    bcTestDataHome = file('core/src/test/data').absolutePath

    debugBuild = Boolean.parseBoolean(resolveProp("debug_build", "false"));
    debugSuffix = Boolean.parseBoolean(resolveProp("debug_build", "false")) ? "-debug" : ""


    vm_range = '8on'

    lts_prov = "${rootProject.projectDir}/prov/build/libs/bcprov-lts${vm_range}${debugSuffix}-${version}.jar"
    lts_util = "${rootProject.projectDir}/util/build/libs/bcutil-lts${vm_range}-${version}.jar"
    lts_pkix = "${rootProject.projectDir}/pkix/build/libs/bcpkix-lts${vm_range}-${version}.jar"
}

task printProperties {
    doLast {
        println bcTestDataHome
    }
}

/**
 * Used for module tests, excludes tests that share a package with test subject.
 **/
task modTestJar(type: Jar) {
    from(project(":core").sourceSets.test.output)
    exclude("org/bouncycastle/crypto/engines/*")
    exclude("org/bouncycastle/crypto/NativeEntropyTests.*")
    exclude("org/bouncycastle/crypto/NativeFailsafeTest.*")
    exclude("org/bouncycastle/mail/smime/test/SignedMailValidatorTest.*")
    from(project(":mail").sourceSets.test.output)
    from(project(":pkix").sourceSets.test.output)
    from(project(":prov").sourceSets.test.output)
    from(project(":tls").sourceSets.test.output)
    from(project(":util").sourceSets.test.output)
    from(project(":test").sourceSets.test.output)
    from(project(":pg").sourceSets.test.output)
    archiveClassifier = "tests"
    // classifier("tests")
}

/*
* Use for running all tests on signed jars.
*/
task allTestJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.WARN
    from(project(":core").sourceSets.test.output)
    exclude("org/bouncycastle/crypto/engines/*")
    exclude("org/bouncycastle/crypto/NativeEntropyTests.*")
    exclude("org/bouncycastle/crypto/NativeFailsafeTest.*")
    from(project(":mail").sourceSets.test.output)
    from(project(":pkix").sourceSets.test.output)
    from(project(":prov").sourceSets.test.output)
    from(project(":tls").sourceSets.test.output)
    from(project(":util").sourceSets.test.output)
    from(project(":test").sourceSets.test.output)
    from(project(":pg").sourceSets.test.output)
    archiveClassifier = "tests"
    //classifier("tests")
}

allTestJar.dependsOn(compileTestJava);


/*
* Use for running all tests on signed jars.
*/
task allTestUnsignedJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.WARN
    from(project(":core").sourceSets.test.output)
    from(project(":mail").sourceSets.test.output)
    from(project(":pkix").sourceSets.test.output)
    from(project(":prov").sourceSets.test.output)
    from(project(":tls").sourceSets.test.output)
    from(project(":util").sourceSets.test.output)
    from(project(":test").sourceSets.test.output)
    from(project(":pg").sourceSets.test.output)
    archiveClassifier = "unsigned-tests"
    // classifier("unsigned-tests")
}

allTestUnsignedJar.dependsOn(compileTestJava);





subprojects {
    apply plugin: 'eclipse'

    tasks.register('testNEON_LE', Test) {

        //
        // Run on the java version used by gradle, other factors may effect what java version you can use
        //

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }

        // TODO 2.73.5 -- no packet ciphers implemented for ARM

        jvmArgs '-Dorg.bouncycastle.packet_cipher_enabled=false',
                '-Dorg.bouncycastle.expected_jvm=any',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=es,gcmsiv,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=neon-le',
                '-Dorg.bouncycastle.test.skip_pc=true'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test8NEON_LE', Test) {
        onlyIf { System.getenv("LTS_JDK8") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(8);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;


        dependsOn(jar)

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        println(jar.archiveFile);

        filter {
            includeTestsMatching "AllTest*"
        }

        // TODO 2.73.5 -- no packet ciphers implemented for ARM

        jvmArgs '-Dorg.bouncycastle.packet_cipher_enabled=false',
                '-Dorg.bouncycastle.expected_jvm=1.8',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=es,gcmsiv,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=neon-le',
                '-Dorg.bouncycastle.test.skip_pc=true'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test11NEON_LE', Test) {
        onlyIf { System.getenv("LTS_JDK11") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(11);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;


        dependsOn(jar)

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        println(jar.archiveFile);

        filter {
            includeTestsMatching "AllTest*"
        }

        // TODO 2.73.5 -- no packet ciphers implemented for ARM

        jvmArgs '-Dorg.bouncycastle.packet_cipher_enabled=false',
                '-Dorg.bouncycastle.expected_jvm=11.',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=es,gcmsiv,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=neon-le',
                '-Dorg.bouncycastle.test.skip_pc=true'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test17NEON_LE', Test) {

        onlyIf { System.getenv("LTS_JDK17") != null }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(17);
        }

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }

        // TODO 2.73.5 -- no packet ciphers implemented for ARM

        jvmArgs '-Dorg.bouncycastle.packet_cipher_enabled=false',
                '-Dorg.bouncycastle.expected_jvm=17.',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=es,gcmsiv,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=neon-le',
                '-Dorg.bouncycastle.test.skip_pc=true'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test21NEON_LE', Test) {

        onlyIf { System.getenv("LTS_JDK21") != null }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(21);
        }

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }

        // TODO 2.73.5 -- no packet ciphers implemented for ARM

        jvmArgs '-Dorg.bouncycastle.packet_cipher_enabled=false',
                '-Dorg.bouncycastle.expected_jvm=21.',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=es,gcmsiv,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=neon-le',
                '-Dorg.bouncycastle.test.skip_pc=true'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }




    // ----


    tasks.register('testVAESF', Test) {

        //
        // Run on the java version used by gradle, other factors may effect what java version you can use
        //

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs '-Dorg.bouncycastle.expected_jvm=any',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaesf'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test8VAESF', Test) {

        onlyIf { System.getenv("LTS_JDK8") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(8);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs '-Dorg.bouncycastle.expected_jvm=1.8',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaesf'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test11VAESF', Test) {
        onlyIf { System.getenv("LTS_JDK11") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(11);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs '-Dorg.bouncycastle.expected_jvm=11',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaesf'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test17VAESF', Test) {

        onlyIf { System.getenv("LTS_JDK17") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(17);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs  '-Dorg.bouncycastle.expected_jvm=17',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaesf'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test21VAESF', Test)   {

        onlyIf { System.getenv("LTS_JDK21") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(21);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs '-Dorg.bouncycastle.expected_jvm=21',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaesf'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }

    tasks.register('testVAES', Test) {

        //
        // Run on the java version used by gradle, other factors may effect what java version you can use
        //

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs '-Dorg.bouncycastle.expected_jvm=any',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaes'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }

    }
    tasks.register('test8VAES', Test)  {

        onlyIf { System.getenv("LTS_JDK8") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(8);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs '-Dorg.bouncycastle.expected_jvm=1.8',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaes'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test11VAES', Test) {

        onlyIf { System.getenv("LTS_JDK11") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(11);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs '-Dorg.bouncycastle.expected_jvm=11',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaes'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }

    }
    tasks.register('test17VAES', Test) {

        onlyIf { System.getenv("LTS_JDK17") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(17);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs '-Dorg.bouncycastle.expected_jvm=17',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaes'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }

    }
    tasks.register('test21VAES', Test) {

        onlyIf { System.getenv("LTS_JDK21") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(21);
        }

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"
        }
        jvmArgs '-Dorg.bouncycastle.expected_jvm=21',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=vaes'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }

    }

    tasks.register('testAVX', Test)  {

        //
        // Run on the java version used by gradle, other factors may effect what java version you can use
        //

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        jvmArgs '-Dorg.bouncycastle.expected_jvm=any',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=avx'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test8AVX', Test) {

        onlyIf { System.getenv("LTS_JDK8") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(8);
        }


        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        jvmArgs '-Dorg.bouncycastle.expected_jvm=1.8',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=avx'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test11AVX', Test) {

        onlyIf { System.getenv("LTS_JDK11") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(11);
        }


        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        jvmArgs '-Dorg.bouncycastle.expected_jvm=11',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=avx'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test17AVX', Test) {

        onlyIf { System.getenv("LTS_JDK17") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(17);
        }


        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        jvmArgs '-Dorg.bouncycastle.expected_jvm=17',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=avx'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }
    tasks.register('test21AVX', Test) {

        onlyIf { System.getenv("LTS_JDK21") != null }

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(21);
        }


        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        jvmArgs '-Dorg.bouncycastle.expected_jvm=21',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha512,sha384,sha3,shake',
                '-Dorg.bouncycastle.native.cpu_variant=avx'

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }


    test {

        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        jvmArgs '-Dorg.bouncycastle.expected_jvm=any',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha,gcm,gcmsiv,cbc,ecb,es,cfb,ctr,ccm,sha512,sha224,sha384,sha3,shake,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=java'

        finalizedBy jacocoTestReport

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }

    tasks.register("test8", Test) {

        onlyIf { System.getenv("LTS_JDK8") != null }
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(8);
        }


        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        jvmArgs '-Dorg.bouncycastle.expected_jvm=1.8',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha,gcm,gcmsiv,cbc,ecb,es,cfb,ctr,ccm,sha512,sha224,sha384,sha3,shake,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=java'

        finalizedBy jacocoTestReport

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }


    tasks.register("test11", Test) {


        onlyIf { System.getenv("LTS_JDK11") != null }
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(11);
        }


        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        jvmArgs '-Dorg.bouncycastle.expected_jvm=11',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha,gcm,gcmsiv,cbc,ecb,es,cfb,ctr,ccm,sha512,sha224,sha384,sha3,shake,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=java'

        finalizedBy jacocoTestReport

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }


    tasks.register("test17", Test) {

        onlyIf { System.getenv("LTS_JDK17") != null }
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(17);
        }


        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        jvmArgs   '-Dorg.bouncycastle.expected_jvm=17',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha,gcm,gcmsiv,cbc,ecb,es,cfb,ctr,ccm,sha512,sha224,sha384,sha3,shake,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=java'

        finalizedBy jacocoTestReport

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }


    tasks.register("test21", Test) {

        onlyIf { System.getenv("LTS_JDK21") != null }
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(21);
        }


        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        maxParallelForks = 1;
        forkEvery = 1;

        classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath

        jvmArgs '-Dorg.bouncycastle.expected_jvm=21',
                '-Dorg.bouncycastle.bks.enable_v1=true',
                '-Dtest.bclts.ignore.native=sha,gcm,gcmsiv,cbc,ecb,es,cfb,ctr,ccm,sha512,sha224,sha384,sha3,shake,slhdsa_sha256',
                '-Dorg.bouncycastle.native.cpu_variant=java'

        finalizedBy jacocoTestReport

        filter {
            includeTestsMatching "AllTest*"

            if (rootProject.hasProperty("skip.pqc.tests")) {
                exclude('**/pqc/**')
            }
        }

        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }
    }


    //---
    task testFull(type: Test) {
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true

        systemProperties = [
                'bc.test.data.home': bcTestDataHome,
                'test.full'        : 'true'
        ]
        systemProperty 'bc.test.data.home', bcTestDataHome
        maxHeapSize = "4096m"
        minHeapSize = "2048m"

        finalizedBy jacocoTestReport

        jvmArgs '-Dorg.bouncycastle.expected_jvm=1.8'

        filter {
            includeTestsMatching "AllTest*"
        }
        reports {
            junitXml.outputLocation = layout.buildDirectory.dir("test-results")
        }


    }

    //---


    dependencies {
        checkstyle files("$rootDir/config/checkstyle/lib/methodchecker.jar")
        checkstyle 'com.puppycrawl.tools:checkstyle:9.0'
    }


    checkstyle {
        configFile file("$rootDir/config/checkstyle/checkstyle.xml");
        toolVersion '9.0'; // your choice here
        sourceSets = [project.sourceSets.main]
    }


    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
    }

    jacoco {
        reportsDirectory = layout.buildDirectory.dir("jacoco")
    }

    tasks.withType(JavaCompile).configureEach {
        options.debug = true;
    }

    task('fopyJars', type: Copy) {
        from new File(projectDir, "build/libs")
        into new File(rootDir, "../bc-lts-java-jars/${project.version}/")
    }

    compileTestJava {
        options.release = 8
    }


    def envVar = [

            // (Env Var, primary task, specific task)
            // If the EnvVar is not null, the primary task depend on the specific task.
            //


            new Tuple("LTS_JDK8", "testNEON_LE", "test8NEON_LE"),
            new Tuple("LTS_JDK11", "testNEON_LE", "test11NEON_LE"),
            new Tuple("LTS_JDK17", "testNEON_LE", "test17NEON_LE"),
            new Tuple("LTS_JDK21", "testNEON_LE", "test21NEON_LE"),

            new Tuple("LTS_JDK8", "testAVX", "test8AVX"),
            new Tuple("LTS_JDK11", "testAVX", "test11AVX"),
            new Tuple("LTS_JDK17", "testAVX", "test17AVX"),
            new Tuple("LTS_JDK21", "testAVX", "test21AVX"),

            new Tuple("LTS_JDK8", "testVAES", "test8VAES"),
            new Tuple("LTS_JDK11", "testVAES", "test11VAES"),
            new Tuple("LTS_JDK17", "testVAES", "test17VAES"),
            new Tuple("LTS_JDK21", "testVAES", "test21VAES"),

            new Tuple("LTS_JDK8", "testVAESF", "test8VAESF"),
            new Tuple("LTS_JDK11", "testVAESF", "test11VAESF"),
            new Tuple("LTS_JDK17", "testVAESF", "test17VAESF"),
            new Tuple("LTS_JDK21", "testVAESF", "test21VAESF"),

            new Tuple("LTS_JDK8", "test", "test8"),
            new Tuple("LTS_JDK11", "test", "test11"),
            new Tuple("LTS_JDK17", "test", "test17"),
            new Tuple("LTS_JDK21", "test", "test21"),


            //


    ];


    def skipProjects = ['bctools', 'benchmark', 'test'].toSet();
    envVar.forEach {
        if (skipProjects.contains(project.name)) {
            return;
        }
        if (System.getenv("${it[0]}") != null) {
            var tsk = tasks.getByName("${it[1]}")
            System.out.println("${project.name}: Adding ${it[2]} as dependency for ${it[1]} task because ${it[0]} is defined")
            tsk.dependsOn("${it[2]}")
        }
    }


} // end of subprojects


tasks.register("copyAndScanJars", DuplicateClassFinder) {
    jarDir = "../bc-lts-java-jars/"
    ignore.add("bccore-lts8on:bcprov-lts8on")
    ignore.add("bcjmail-lts8on:bcmail-lts8on")
    verbose = true
}

tasks.named("copyAndScanJars").configure {
    var prj = [];
    subprojects.each {
        if (it.tasks.findByName("copyJars") != null) {
            prj += ":${it.name}:copyJars";
        }
    }

    dependsOn(prj)
}


test.dependsOn([':core:test', ':prov:test', ':pkix:test', ':mail:test', 'pg:test', ':tls:test'])


