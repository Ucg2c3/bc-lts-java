import static ExtraFunctions.*

plugins {
  id "biz.aQute.bnd.builder" version "7.0.0"
}

jar.archiveBaseName = "bccore-lts$vm_range"


sourceSets {
    java9 {
        java {
            srcDirs = ['src/main/jdk1.9']
        }
    }
}


dependencies {
  testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'

    java9Implementation files([sourceSets.main.output.classesDirs]) {
        builtBy compileJava
    }
}

//test {
//    testLogging.showStandardStreams = true
//    testLogging.showCauses = true
//    testLogging.showExceptions = true
//    testLogging.showStackTraces = true
//
//   jvmArgs '-Dorg.bouncycastle.expected_jvm=1.8',
//           '-Dorg.bouncycastle.bks.enable_v1=true',
//           '-Dtest.bclts.ignore.native=sha,gcm,gcmsiv,cbc,ecb,es,cfb,ctr,ccm,sha512,sha224,sha384,sha3,shake,slhdsa_sha256',
//           '-Dorg.bouncycastle.native.cpu_variant=java'
//
//    filter {
//        includeTestsMatching "AllTest*"
//    }
//
//}

jar {
    from sourceSets.main.output
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }

    manifest.attributes('Multi-Release': 'true')
    manifest.attributes('Permissions': 'all-permissions')
    manifest.attributes('Codebase': '*')
    manifest.attributes('Application-Library-Allowable-Codebase': '*')
    manifest.attributes('Caller-Allowable-Codebase': '*')
    manifest.attributes('Trusted-Library': 'true')
}

compileJava {
    options.release = 8
}


task sourcesJar(type: Jar) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    exclude("**/*.so")
    into('native/intel') {
        from '../native_c/intel'
    }
    into('native/jniutil') {
        from '../native_c/jniutil'
    }
}

javadoc {
    title = "Bouncy Castle Library (LTS Edition) ${version} Low-Level API"
    options.windowTitle = "Bouncy Castle Library (LTS Edition) ${version} Low-Level API"
    options.overview = "overview.html"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}


compileJava9Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
    options.release = 9
    options.sourcepath = files(['src/main/java', 'src/main/jdk1.9'])
}


task cleanNative(type: Delete) {
    delete("$projectDir/src/main/resources/native/");
    delete("$projectDir/src/main/resources/META-INF/DRIVERS");
}


task('copyJars', type: Copy) {
    dependsOn("jar")
    dependsOn("sourcesJar")
    dependsOn("javadocJar")

    from new File(projectDir, "build/libs")
    into new File(rootDir, "../bc-lts-java-jars/${version}/")
}

task withNative() {
    doLast {

        // Intel -- Linux
        if (directoryExists("$rootDir/native_c/target/linux/x86_64/probe")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/probe", "$projectDir/src/main/resources/native/linux/x86_64/probe")
        }

        if (directoryExists("$rootDir/native_c/target/linux/x86_64/sse")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/sse", "$projectDir/src/main/resources/native/linux/x86_64/sse")
        }

        if (directoryExists("$rootDir/native_c/target/linux/x86_64/avx")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/avx", "$projectDir/src/main/resources/native/linux/x86_64/avx")
        }

        if (directoryExists("$rootDir/native_c/target/linux/x86_64/vaes")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/vaes", "$projectDir/src/main/resources/native/linux/x86_64/vaes")
        }

        if (directoryExists("$rootDir/native_c/target/linux/x86_64/vaesf")) {
            copyDirContent("$rootDir/native_c/target/linux/x86_64/vaesf", "$projectDir/src/main/resources/native/linux/x86_64/vaesf")
        }

        // ARM - darwin
        if (directoryExists("$rootDir/native_c/target/darwin/arm64/probe")) {
            copyDirContent("$rootDir/native_c/target/darwin/arm64/probe", "$projectDir/src/main/resources/native/darwin/arm64/probe")
        }

        if (directoryExists("$rootDir/native_c/target/darwin/arm64/neon-le")) {
            copyDirContent("$rootDir/native_c/target/darwin/arm64/neon-le", "$projectDir/src/main/resources/native/darwin/arm64/neon-le")
        }

        // ARM - linux
        if (directoryExists("$rootDir/native_c/target/linux/arm64/probe")) {
            copyDirContent("$rootDir/native_c/target/linux/arm64/probe", "$projectDir/src/main/resources/native/linux/arm64/probe")
        }

        if (directoryExists("$rootDir/native_c/target/linux/arm64/neon-le")) {
            copyDirContent("$rootDir/native_c/target/linux/arm64/neon-le", "$projectDir/src/main/resources/native/linux/arm64/neon-le")
        }


    }
}



