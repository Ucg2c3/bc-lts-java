import java.nio.file.CopyOption
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import static ExtraFunctions.*

plugins {
    id "biz.aQute.bnd.builder" version "7.0.0"
}

jar.archiveBaseName = "bcjmail-lts${vm_range}"

sourceSets {
    main {
        java {
            srcDirs = ['build/src/main/java']
        }
    }
    java9 {
        java {
            srcDirs = ['src/main/jdk1.9']
        }
    }
}


dependencies {
    implementation project(':prov')
    implementation project(':util')
    implementation project(':pkix')

    implementation group: 'jakarta.mail', name: 'jakarta.mail-api', version: '2.0.1'
    implementation group: 'jakarta.activation', name: 'jakarta.activation-api', version: '2.0.0'
    implementation files("$lts_prov")
    implementation files("$lts_util")
    implementation files("$lts_pkix")
    implementation project(path: ':core')

    java9Implementation project(':prov')
    java9Implementation project(':util')
    java9Implementation project(':pkix')
    java9Implementation group: 'jakarta.mail', name: 'jakarta.mail-api', version: '2.0.1'
    java9Implementation group: 'jakarta.activation', name: 'jakarta.activation-api', version: '2.0.0'
    java9Implementation files(sourceSets.main.output.classesDirs) {
        builtBy compileJava
    }
}

compileJava {
    options.release = 8
    dependsOn(':prov:jar')
    dependsOn(':util:jar')
    dependsOn(':pkix:jar')

}

task copyTask(type: Copy) {
    duplicatesStrategy = 'include'
    from '../mail/src/main/java'
    from 'src/main/java'
    into 'build/src/main/java'
    filter { String line -> (line.contains('javax.mail') || line.contains('javax.activation')) ? line.replace('javax.mail', 'jakarta.mail').replace('javax.activation', 'jakarta.activation') : line }
}

compileJava.dependsOn(copyTask)

compileJava9Java {
    options.release = 9

    options.compilerArgs += [
            '--module-path', "$lts_prov:$lts_util:$lts_pkix:${rootProject.projectDir}/libs/jakarta.mail-2.0.1.jar:${rootProject.projectDir}/libs/jakarta.activation-api-2.0.0.jar"
    ]
    options.sourcepath = files(['build/src/main/java', 'src/main/jdk1.9'])
}

jar {
    from sourceSets.main.output
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    String v = "${rootProject.extensions.ext.bundle_version}"
    manifest.attributes('Multi-Release': 'true')
    manifest.attributes('Bundle-Name': 'bcjmail')
    manifest.attributes('Bundle-SymbolicName': 'bcjmail')
    manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8')
    manifest.attributes('Export-Package': "org.bouncycastle.mail.*;version=${v}")
    manifest.attributes('Import-Package': "java.*;resolution:=optional,javax.*;resolution:=optional,jakarta.*;resolution:=optional,!org.bouncycastle.mail.*,org.bouncycastle.*;version=\"[${v},${maxVersion})\"")
    manifest.attributes('Bundle-Version': "${v}")
    manifest.attributes('Permissions': 'all-permissions')
    manifest.attributes('Codebase': '*')
    manifest.attributes('Application-Library-Allowable-Codebase': '*')
    manifest.attributes('Caller-Allowable-Codebase': '*')
    manifest.attributes('Trusted-Library': 'true')
}

task sourcesJar(type: Jar) {
    duplicatesStrategy = 'include'
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    from rootProject.project(':mail').sourceSets.main.allSource
    filter { String line -> line.contains('javax.mail') ? line.replace('javax.mail', 'jakarta.mail') : line }

    into('META-INF/versions/9') {
        from sourceSets.java9.allSource
    }
    dependsOn(':jmail:copyTask')

}

javadoc {
    dependsOn(':prov:jar')
    dependsOn(':pkix:jar')
    title = "Bouncy Castle Library (LTS Edition) ${version} JakartaMail API"
    options.windowTitle = "Bouncy Castle Library (LTS Edition) ${version} JakartaMail API"
    options.overview = "overview.html"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

task('copyJars', type: Copy) {
    from new File(projectDir, "build/libs")
    into new File(rootDir, "../bc-lts-java-jars/${version}/")
}

checkstyleMain {
    dependsOn(':prov:jar')
    dependsOn(':util:jar')
    dependsOn(':pkix:jar')
}
